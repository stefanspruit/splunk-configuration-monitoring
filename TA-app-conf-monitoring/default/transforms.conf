# Identifies the fields in si_conf.  conf_fields finds fields without quotes while conf_quotes finds the ones with quotes: conf_fields,conf_quotes,conf_text
[source_file]
CLEAN_KEYS = 0
REGEX = [\\\/]+etc[\\\/]+(?:(?!system)[^\\\/]+[\\\/]+)?(?:admin[\\\/]+)?(?<app>[^\\\/]+)[\\\/](?:[^\\\/\n]+[\\\/])+(?<source_file>.+)
SOURCE_KEY = source

[conf_stanza_source]
FORMAT = source_ca::$1
REGEX = ^source::(.+)
SOURCE_KEY = stanza

[conf_stanza_host]
FORMAT = host_ca::$1
REGEX = ^host::(.+)
SOURCE_KEY = stanza

[conf_props]
CLEAN_KEYS = 1
FORMAT = $1::$2
MV_ADD = 1
REGEX = ^([A-Z]+)-([^\s\n=]+)

[conf_lines]
CLEAN_KEYS = 1
FORMAT = $1::$2
MV_ADD = 1
REGEX = (?m)^([\w\.\-]+) *= *(.+(?:\n\|.+)*)

[pipe_search]
MV_ADD = 1
REGEX = \| *(\w+) +([^\|\n]*[^\s\|\n])
FORMAT = $1::$2
SOURCE_KEY = search

[conf_tags1]
CLEAN_KEYS = 1
FORMAT = $2::$1
MV_ADD = 1
REGEX = ^\[stanza=([^\]]+)\](?:\n(\w+) *= *\w+)+

[conf_tags2]
CLEAN_KEYS = 1
FORMAT = tags::$1
MV_ADD = 1
REGEX = \n(\w+)+ *= *enabled

# props stanza = si_conf
[conf_fields]
FORMAT = $1::$2
REGEX = , (?!text)([\w\-\$\%\:\;]+)=([^\"\,\n]+)

[conf_quotes]
FORMAT = $1::$2
MV_ADD = 1
REGEX = , +(?!text)(\w+)=(?|"([^"]+(?:(?<=\\)(?!",)"[^"]+)*)"|([^\s,]+))

[conf_type]
CLEAN_KEYS = 0
REGEX = (?<conf_type>[^\\\/]+)$
SOURCE_KEY = source

[app]
CLEAN_KEYS = 0
REGEX = apps[\\\/]+(?<app>[^\\\/]+)
SOURCE_KEY = source

[file]
FORMAT = app::$1 file_name::$2
REGEX = ^(?:[^S][^\\\/]+[\\\/])*Splunk\w*[\\\/]etc[\\\/]apps[\\\/]([^\\\/]+)[\\\/](?:[^\\\/\n]+[\\\/])*(.*)

[conf_text]
FORMAT = text::$1
REGEX = , text="(.+)"
CAN_OPTIMIZE = false

# Extracts transforms stanza references from props.conf
[props_transforms]
REGEX = ^(REPORT|TRANSFORMS)(?<transforms_types>\-([^=]+))? *= *(?<transforms_stanza>.+)
MV_ADD = 1

[props_transforms_mv]
MV_ADD = 1
REGEX = (?<transforms_stanza_mv>[^,]+)
SOURCE_KEY = transforms_stanza

# Search text field for cron schedule: search_cron
[search_cron]
FORMAT = search_cron::$1
REGEX = cron_schedule\s*=\s*(.+)
SOURCE_KEY = text

# Search text field for whether the search is enabled: enabled
[enabled]
FORMAT = enabled::$1
REGEX = enableSched\s*=\s*(.+)
SOURCE_KEY = text

# parse search
[search_pipe_type]
MV_ADD = 1
REGEX = \| *(?<search_type>\w+)? *(?<search_pipe>[^\|\n]*[^\s\|\n])
SOURCE_KEY = text

# extract elements from the search string SPL: search_macro,search_report
[search_macro]
FORMAT = macro::$1 macro_input::$2
MV_ADD = 1
REGEX = \`([^\`\(\n]+)(?:\(([^\`\)]+)\))?\`
SOURCE_KEY = text

[search_report]
MV_ADD = 1
REGEX = (?i)\|\s*(?=[stce])(?<search_report_type>table|(?:t|si|event|stream)?stats|(time)?chart)\s+(?<search_report_value>[^\|\n]+[^\s\|\n"])
SOURCE_KEY = text

# Search _time and _indextime changes: search_time
[search_time]
FORMAT = search_time::$1
MV_ADD = 1
REGEX = _(index)?time\s*=\s*(\w+)
SOURCE_KEY = search_pipe

# Identify the old and new field names during rename
[search_rename]
MV_ADD = 1
REGEX = (?i)(?<field_parent>[^\s"]+|"[^",]+") +as +(?<field_child>[^\s"]+|"[^",]+")
SOURCE_KEY = rename

[search_eval]
FORMAT = eval_name::$1 eval_val::$2
REGEX = ([^=]*[^=\s])[\s=]+([^\|]*[^\|\s\]])
SOURCE_KEY = eval

# Extracts fields from SOURCE_KEY = text: search_type,conf_name,conf_action,extract_name,extract_name2
[search_type]
FORMAT = search_type::$1
REGEX = action\.summary_index\.search_type\s*=\s*(.+)
SOURCE_KEY = text

[si_name]
FORMAT = si_name::$1
REGEX = action\.summary_index\._name = (\w+)
SOURCE_KEY = text

[si_action]
FORMAT = si_action::$1
REGEX = action\.summary_index\s*=\s*(.+)
SOURCE_KEY = text

# Extract parts of stats SPL: field_parent, field_child, by
[paren_parent]
MV_ADD = 1
REGEX = \((?<field_parent>[^\),]+)
SOURCE_KEY = search_report_value

[by]
REGEX = (?i)(?<=[ p])by +(?<by>[^\|\n]+)
SOURCE_KEY = search_pipe

[by_parent]
MV_ADD = 1
REGEX = (?<field_parent>[^\s,"]+|"[^",]+")
SOURCE_KEY = by

[as_child]
MV_ADD = 1
REGEX = (?i)as +(?<field_child>[^\s"]+|"[^",]+")
SOURCE_KEY = text

# sid transform for audittrail sourcetype
[sid]
REGEX = [`']?(?<sid>[\w\.]+)
SOURCE_KEY = search_id

# Transforms for conf sourcetype

[src_app_file]
FORMAT = app::$1 file_name::$2
REGEX = ^(?:[^S][^\\\/]+[\\\/])*Splunk\w*[\\\/]etc[\\\/]apps[\\\/]([^\\\/]+)[\\\/](?:[^\\\/\n]+[\\\/])*(.*)
SOURCE_KEY = source

[conf_types]
MV_ADD = 1
REGEX = ^([a-zA-Z_]{3,})(?:-[^=\s]+)? [=\s]+(.+)
FORMAT = $1::$2
CLEAN_KEYS = true

[conf_comments]
MV_ADD = 1
REGEX = ^(?<comment_status>#+) *(?<comment>.*)

[sc_app]
MV_ADD = 1
REGEX = ^\[serverClass:(\w+):app:([^\]]+)
CLEAN_KEYS = true
FORMAT = $1::$2

[sc_whitelist]
MV_ADD = 1
REGEX = whitelist\.\d+ *= *(?<whitelist>.*)

[sc_blacklist]
MV_ADD = 1
REGEX = blacklist\.\d+ *= *(?<blacklist>.*)

# views
[views_std]
MV_ADD = 1
REGEX = \<(\w+[^\n\/\>]+)\/?\>([^\<\n][^\<]*)\<
FORMAT = $1::$2
CLEAN_KEYS = true

[views_param]
MV_ADD = 1
REGEX = \<(\w+ [^\n\/\>]+)\/?\>
FORMAT = param::$1
CLEAN_KEYS = true

[views_option]
MV_ADD = 1
SOURCE_KEY = param
REGEX = (\w+(?: \w+)*)="(?!host|source|sourcetype|index|splunk_server)(\w+)"
FORMAT = $1::$2
CLEAN_KEYS = true

# si_conf transforms
[si_conf_text]
MV_ADD = 1
REGEX = text="([A-Z_]{3,})(?:-(\S*))? *= *(.*[^\s\|\n"](?:\\")?)
FORMAT = conf_type::$1 conf_name::$2 $1::$3
CLEAN_KEYS = true